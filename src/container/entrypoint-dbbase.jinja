#!/usr/bin/env python3
import os
import subprocess
import sys
import time

# ignore print statement and subprocess rules
# ruff: noqa: T201, S603, S607

def check_call(cmd):
    print(" ".join(cmd))
    sys.stdout.flush()
    subprocess.check_call(cmd)


# wait for postgres to be ready
sleep = 1
while sleep < 64:
    if subprocess.call(["pg_isready"]) == 0:
        break
    print("Waiting for postgres...")
    time.sleep(sleep)
    sleep = sleep * 2
else:
    raise SystemExit("postgres is not ready, giving up")

db_name = os.getenv("DB_NAME")
db_base = os.getenv("DB_BASE")

if db_name:
    for database in db_name.split(","):
        running_env = os.getenv("RUNNING_ENV")
        if not running_env:
            print("ERROR : RUNNING_ENV variable is not set")
            sys.exit(1)
        if db_base:
            check_call(
                [
                    "click-odoo-copydb",
                    "--force-disconnect",
                    "--if-source-exists",
                    "--unless-dest-exists",
                    db_base,
                    database,
                ]
            )
        check_call(
            [
                "click-odoo-initdb",
                "--unless-exists",
                "-n",
                database,
                # Don't use --no-cache so attachments created before fs_attachment
                # is configured are stored in the database instead of the filesystem
                # (where the would be lost upon restart of the container).
                # https://github.com/acsone/click-odoo-contrib/issues/146
                # "--no-cache",
                "-m",
                "{{ project_trigram }}_fs_attachment,server_environment_ir_config_parameter",
            ]
        )
        if running_env != "prod":
            check_call(
                [
                    "odoo",
                    "neutralize",
                    "-d",
                    database,
                ]
            )
        check_call(
            [
                "click-odoo-update",
                "--if-exists",
                "-d",
                database,
                "--i18n-overwrite",
            ]
        )

# wait for wkhtmltopdf to be ready
sleep = 1
while sleep < 64:
    if subprocess.call(["wkhtmltopdf", "--version"]) == 0:
        break
    print("Waiting for wkhtmltopdf...")
    time.sleep(sleep)
    sleep = sleep * 2
else:
    raise SystemExit("wkhtmltopdf is not ready, giving up")
