# Odoo for {{ project_name }}

**Table of Contents**

- [Odoo for {{ project_name }}](#odoo-for-{{ project_name|lower|replace(' ', '-') }})
  - [Development environment howto](#development-environment-howto)
    - [Development requirements](#development-requirements)
    - [Preliminary steps](#preliminary-steps)
    - [Initialize virtualenv](#initialize-virtualenv)
    - [Install everything](#install-everything)
    - [Develop](#develop)
  - [Run](#run)
  - [Running tests](#running-tests)
  - [Release](#release)

## Development environment howto

### Development requirements

Install [mise](https://github.com/jdx/mise).

### Preliminary steps

- Clone the repository
- Prepare the project-specific Odoo branch by running `gitaggregate -c gitaggregate.yaml -p`.
- To make git-aggregate run faster on large repositories such as Odoo, it is recommended to install [git-autoshare](https://pypi.python.org/pypi/git-autoshare). Don't forget to configure it according to the documentation.
- Pin the build dependencies using for CI by running `./sync-build.sh`

### Initialize virtualenv

In the project root directory, run `mise trust` and `mise install`. Then, by changing to the project directory
the virtual environment will be created and activated automatically, and all tools to work on the project will be available.

### Install everything

Some dependencies are not available on PyPI as manylinux wheels, so you need
to have a C compiler,the Python headers and some additional dev
packages installed in order to compile them. The list of packages can be
found in the `build-deps` stage of the [Dockerfile](./Dockerfile)

As an alternative, you can reference the wheelhouse from ACSONE in the pip
environment variable before launching the pip-df command::

   export PIP_FIND_LINKS=https://wheelhouse.acsone.eu/manylinux2014

In an activated python {{ python_version }} virtualenv, run::

   pip-df sync

When dependencies change, use `pip-df sync` again, possibly with
`--update`. Add unmerged VCS dependencies in `requirements.txt.in`. See the
pip-deepfreeze documentation for more information.

### Develop

This project uses [black](https://pypi.org/project/black) and other code formatters.
To make sure local coding convention are respected before
you commit, install [pre-commit](https://pypi.org/project/pre-commit) and
run `pre-commit install` after cloning the repository.

## Run

```
odoo -c odoo.cfg
```

## Running tests

To run tests as usual

```
odoo --test-enable
```

To run tests with pytest Odoo

```
pytest --odoo-database=<dbname> odoo/addons
```

## Release

1. First make sure you have been testing using the correct dependencies by
   running `pip-df sync` and checking there is no change in `requirements*.txt`.
2. Update the version number using `bumpversion patch|minor|major` and push the tag
   that bumpversion created with `git push --follow-tags`.
3. The deploy to the test environment will be automatic, and GitLab will show buttons
   on the pipeline to deploy to other environments.
